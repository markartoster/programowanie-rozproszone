{"version":3,"sources":["js/main.js"],"names":["wallPosition","r","c","exit","player","agentArray","winnerArray","winnerIndex","isWinner","moveTypes","agentsMoves","agentsPositions","generation","maxMoves","population","probabilityOfCrossbreed","probabilityOfMutation","max","min","endingPositions","BreakException","init","counter","push","id","manhattan","generateStartingPopulation","map","agent","moves","Math","round","random","forEach","test","index","tempAgentsPositionsArray","currentPosition","agentMove","indexMove","agentMoveInside","indexMoveInside","agentPositions","indexOut","selection","manhattanJudge","xi","yi","xg","yg","endingPosition","abs","sort","a","b","agents70","agents30","slice","startArray","endArray","startEndArray","help","length","floor","concat","error","console","log","indexInside","searchRoute","agentPosition","wall","e","document","getElementById","addEventListener"],"mappings":"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","file":"main.fb6bbcaf.map","sourceRoot":"..","sourcesContent":["// Ściany\nconst wallPosition = [\n    {r: 0, c: 0}, {r: 0, c: 1}, {r: 0, c: 2}, {r: 0,c:3}, {r:0,c:4}, {r:0,c:5}, {r:0,c:6}, {r:0,c:7}, {r:0,c:8}, {r:0,c:9}, {r: 0,c: 10}, {r: 0,c: 11},\n    {r: 1, c: 0}, {r: 1, c: 4}, {r: 1, c: 8}, {r: 1,c: 11},\n    {r: 2, c: 0}, {r: 2, c: 1}, {r: 2, c: 2}, {r: 2, c: 6}, {r: 2, c: 8}, {r: 2, c: 9}, {r: 2, c: 11},\n    {r: 3, c: 0}, {r: 3, c: 4}, {r: 3, c: 6}, {r: 3,c: 11} ,\n    {r: 4, c: 0}, {r: 4, c: 2}, {r: 4, c: 4}, {r: 4,c: 5}, {r: 4, c: 8}, {r: 4,c: 9}, {r: 4,c: 11},\n    {r: 5, c: 0}, {r: 5, c: 3}, {r: 5, c: 4}, {r: 5, c: 8}, {r: 5, c: 11},\n    {r: 6, c: 0}, {r: 6, c: 6}, {r: 6, c: 11}, \n    {r: 7, c: 0}, {r: 7, c: 2}, {r: 7, c: 5}, {r: 7,c: 6}, {r: 7, c: 8}, {r: 7 ,c: 11},\n    {r: 8, c: 0}, {r: 8, c: 2}, {r: 8, c: 3}, {r: 8,c: 4}, {r: 8, c: 8}, {r: 8, c: 9}, {r: 8, c: 11},\n    {r: 9, c: 0}, {r: 9, c: 2}, {r: 9, c: 4}, {r: 9,c: 5}, {r: 9,c: 7}, {r: 9,c: 9}, {r: 9,c: 11},\n    {r: 10, c: 0}, {r: 10, c: 2},{r: 10, c: 11},\n    {r: 11, c: 0}, {r: 11, c: 1},{r: 11, c: 2},{r: 11, c:3}, {r: 11, c:4}, {r: 11, c:5}, {r: 11, c:6}, {r: 11, c:7}, {r: 11, c:8}, {r: 11, c:9}, {r: 11, c: 10}, {r: 11, c: 11}\n];\nconst exit = {r: 10, c: 10};\nconst player = {r: 1, c: 1};\n\n/*\nTabela stanów typy ruchów moveTypes\n00 - Lewo\n01 - Prawo\n10 - Góra\n11 - Dół\n*/\nvar agentArray = []\nvar winnerArray = []\nvar winnerIndex = 0;\nvar isWinner = false;\n\nconst moveTypes = ['00', '01', '10', '11'];\nlet agentsMoves = [];\nlet agentsPositions = [];\nlet generation = 1;\n\n// Paramtery\nconst maxMoves = 40; // Długość chromosomu 80, maksymalnie mozna wykonać 40 ruchów\nconst population = 200; // rozmiar populacji\nconst probabilityOfCrossbreed = 0.7; // Prawdopodobieństwo krzyzowania \nconst probabilityOfMutation = 0.7; // Prawdopodobieństwo mutacji\nconst max = 3; // Maksymalna ilość typów\nconst min = 0; // Minimalna ilość typów\n\n//\nlet endingPositions = []; // Tablica pozycji końcowych wszytkich agentów\nvar BreakException = {};\n\n//Inicjacja tablicy ruchów\nconst init = () => {\n    for(let counter = 0; counter < population; counter++){\n        agentsMoves.push([]);\n        agentsPositions.push([]);\n        agentArray.push({\n            id: 0,\n            agentsMoves: [],\n            manhattan: []\n        });\n        winnerArray.push({\n            id: 0,\n            agentsPositions: [],\n            manhattan: []\n        })\n    }\n    \n};\n\n// Losowanie populacji początkowej\nconst generateStartingPopulation = () => {\n\n    agentsMoves = agentsMoves.map((agent) => {\n        \n        let moves = []; // Pomocnicza wewnętrzna tablica\n        \n        for(let counter = 0; counter < maxMoves; counter++){\n            \n            moves.push(moveTypes[Math.round(Math.random()* (max - min) + min)])\n        }\n        \n        agent = moves;\n        // console.log(agent);\n        return agent\n    });\n\n    agentsPositions.forEach(test => {\n        for (let index = 0; index < maxMoves; index++) {\n            test.push({r: 0, c: 0});           \n        }\n    })\n\n    let tempAgentsPositionsArray = []\n    for (let index = 0; index < population; index++) {\n        tempAgentsPositionsArray.push([]);      \n    }\n\n    tempAgentsPositionsArray.forEach(test => {\n        for (let index = 0; index < maxMoves; index++) {\n            test.push({r: 0, c: 0});           \n        }\n    })\n\n    \n    let currentPosition = {r: player.r, c: player.c}; \n     \n\n    agentsMoves.map((agentMove, indexMove) => {\n        \n        agentMove.map((agentMoveInside, indexMoveInside) => {\n            \n            \n            \n            if(agentMoveInside === moveTypes[0]){\n                currentPosition.c--; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n            else if (agentMoveInside === moveTypes[1]){\n                currentPosition.c++; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n            else if (agentMoveInside === moveTypes[2]){\n                currentPosition.r--; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n            else if (agentMoveInside === moveTypes[3]){\n                currentPosition.r++; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n        })\n        currentPosition.r = player.r;\n        currentPosition.c = player.c;\n\n    })\n    \n    agentsPositions.map((agentPositions, indexOut) => {\n        agentPositions.map((agent, index) => {\n            agent.r = tempAgentsPositionsArray[indexOut][index].r;\n            agent.c = tempAgentsPositionsArray[indexOut][index].c;\n        })\n    })\n    \n    \n}\n\n\n\n// Faza selekcji\nconst selection = () => {\n\n}\n\nconst manhattanJudge = () => {\n    var xi; // współrzędna końcowa agenta x  \n   var yi; // współrzędna końcowa agenta y\n   const xg = exit.c; // współrzędna x wyjścia/mety\n   const yg = exit.r; // Współrzędna y wyjścia/,ety \n   var manhattan = []; //(1/(Math.abs(xi-xg) + Math.abs(yi-yg) +1 ))\n   endingPositions.forEach((endingPosition, index) => {\n       xi = endingPosition.c;\n       yi = endingPosition.r;\n       manhattan.push((1/(Math.abs(xi-xg) + Math.abs(yi-yg) +1 )));\n       \n   }) \n//    console.log(manhattan);\n   \n//    console.log(`Generacja ${generation}, odległość agent ${agent} do celu  : ${manhattan[agent]}`);\n   for (let index = 0; index < population; index++) {\n        agentArray[index].id = index;\n        agentArray[index].agentsMoves = agentsMoves[index];\n        agentArray[index].manhattan = manhattan[index];  \n   }\n\n    agentArray = agentArray.sort((a, b) => { // non-anonymous as you ordered...\n    return b.manhattan < a.manhattan ?  1 // if b should come earlier, push a to end\n         : b.manhattan > a.manhattan ? -1 // if b should come later, push a to begin\n         : 0;                   // a and b are equal\n    });\n\n    \n    var agents70 = [];\n    var agents30 = [];\n    agents70 = agentArray.slice(0,((population+1)*0.7));\n    //console.log(agents70);\n    agents30 = agentArray.slice(((population+1)*0.7), population);\n    //console.log(agents30);\n    var startArray = []\n    var endArray = []\n    var startEndArray = []\n    agents70.forEach(agent => {    \n        startArray.push(agent.agentsMoves.slice(0, maxMoves/2))       \n        endArray.push(agent.agentsMoves.slice(maxMoves/2, maxMoves))\n    })\n    // console.log(startArray);\n    //console.log(endArray);\n    //console.log(endArray[0]);\n\n    //TUTAJ LOSUJEMY\n    var help;\n    for (let index = 0; index < endArray.length; index++) {\n        endArray[index] = endArray[index].sort(() => Math.random() - 0.5).slice(0);\n        \n    }\n\n    //----------------TUTAJ SKONCZYLISMY - CZYTAJ KOMENTARZE--------------\n    \n    /*\n        Krzyzowanie startowych z koncowymi ruchami(jak na schemacie) do nowej TABLICY startEndArray\n    */\n    for (let index = 0; index < Math.floor(((population+1)*0.7)); index = index+2) {\n        try {\n            startEndArray.push(startArray[index].concat(endArray[index+1])) //pierwszy startowy z nastepnym koncowym\n            startEndArray.push(startArray[index+1].concat(endArray[index])) //nastepny startowy z pierwszym koncowym\n        } catch (error) {\n            console.log(index);\n            console.log(`population: ${((population+1)*0.7)}`);\n            \n        }\n        \n    }\n\n    \n    //PODMIENIAMY TE 140 tablic ruchow agentow za 140 wymieszanych ruchow z tablicy startEndArray!\n\n    for (let index = 0; index < agents70.length; index++) {\n        for (let indexInside = 0; indexInside < maxMoves; indexInside++) {\n            \n            const a = {}\n            agents70[index].agentsMoves[indexInside] = startEndArray[index][indexInside]; //PODMIANA\n            const b = {}\n            \n        }\n    }\n\n\n    //W DUZEJ TABLICY AGENTOW agentArray Podmnieniamy pierwszych 140 agentow za tych zmutowanych z agents70\n\n    for (let index = 0; index < agents70.length; index++) {\n        const a = {}\n        agentArray[index].agentsMoves = agents70[index].agentsMoves.slice(0)\n        const b = {}\n        \n    }\n\n    //GENERACJA + 1\n\n   generation +=1 ;\n}\n\nsearchRoute = () => {\n\n    \n    let currentPosition = {r: player.r, c: player.c}; \n\n    //NOWA TYMCZASOW TABLIC NA POZYCJE\n\n    let tempAgentsPositionsArray = []\n    \n    for (let index = 0; index < population; index++) {\n        tempAgentsPositionsArray.push([]);      \n    }\n\n    tempAgentsPositionsArray.forEach(test => {\n        for (let index = 0; index < maxMoves; index++) {\n            test.push({r: 0, c: 0});           \n        }\n    })\n\n    //LICZYMY POZYCJE KORZYSTAJAC JUZ Z !!!!TABLICY OBIEKTOW AGENTOW!!!!\n    \n    agentArray.map((agentMove, indexMove) => {\n        \n        agentMove.agentsMoves.map((agentMoveInside, indexMoveInside) => {\n            \n            \n            \n            if(agentMoveInside === moveTypes[0]){\n                currentPosition.c--; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n            else if (agentMoveInside === moveTypes[1]){\n                currentPosition.c++; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n            else if (agentMoveInside === moveTypes[2]){\n                currentPosition.r--; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n            else if (agentMoveInside === moveTypes[3]){\n                currentPosition.r++; \n                tempAgentsPositionsArray[indexMove][indexMoveInside].r = currentPosition.r;\n                tempAgentsPositionsArray[indexMove][indexMoveInside].c = currentPosition.c; \n            }\n        })\n        currentPosition.r = player.r;\n        currentPosition.c = player.c;\n    })\n\n    //MODYFIKUJEMY NA NOWO TABLICE POZYCJI\n    agentsPositions.map((agentPositions, indexOut) => {\n        agentPositions.map((agent, index) => {\n            agent.r = tempAgentsPositionsArray[indexOut][index].r;\n            agent.c = tempAgentsPositionsArray[indexOut][index].c;\n        })\n    })\n\n    //REFRESHUJEMY TABLICE KONCOWYCH POZYCJI\n    endingPositions = [];\n\n    //ZNOWU WRZUCAMY DO TEJ TABLICY OBIEKTY Z ROW I COLUMN POCZATKOWEJ POZYCJI\n    for (let index = 0; index < population; index++) {\n        endingPositions.push({r: 1, c: 1});           \n    }\n\n    //SPRAWDZAMY SCIANY I WYLICZAMY POZYCJE KONCOWE\n    agentsPositions.forEach((agentPosition, indexOut) => {\n        try {\n            agentPosition.forEach((agent, index) => {\n                \n                    wallPosition.map(wall => {\n                        if(agent.r === wall.r && agent.c === wall.c ){\n                            \n                            if(index === 0){\n                                endingPositions[indexOut].r=player.r;\n                                endingPositions[indexOut].c=player.c;\n                            } else {\n\n                                endingPositions[indexOut].r=agentPosition[index-1].r;\n                                endingPositions[indexOut].c=agentPosition[index-1].c;\n                            }      \n                            throw BreakException\n                        } else if (agent.r === exit.r && agent.c === exit.c) {\n                            /*\n                                WARUNEK ZNALEZIENIA WYJSCIA - DODAJEMY TABLICE POZYCJI DLA ZWYCIEZCY - zmienaimy isWinner an true i wychodzimy z petli\n                            */\n                            winnerArray[winnerIndex].id = winnerIndex;\n                            winnerArray[winnerIndex].agentsPositions = agentPosition.slice(0);\n                            winnerIndex++;\n                            isWinner = true;\n\n                        } \n                    });\n                \n            });\n        } catch (e) {\n            if (e !== BreakException) throw e;\n        }\n    });\n\n    var xi; // współrzędna końcowa agenta x  \n    var yi; // współrzędna końcowa agenta y\n    const xg = exit.c; // współrzędna x wyjścia/mety\n    const yg = exit.r; // Współrzędna y wyjścia/,ety \n    var manhattan = []; //(1/(Math.abs(xi-xg) + Math.abs(yi-yg) +1 ))\n    endingPositions.forEach((endingPosition, index) => {\n        xi = endingPosition.c;\n        yi = endingPosition.r;\n        manhattan.push((1/(Math.abs(xi-xg) + Math.abs(yi-yg) +1 )));\n        \n    }) \n //    console.log(manhattan);\n    \n\n    //odmieniamy tylko manhattany\n\n    for (let index = 0; index < population; index++) {\n        \n        agentArray[index].manhattan = manhattan[index];  \n   }\n\n   //SORTOWANIE po MANHATTANACH\n\n   agentArray = agentArray.sort((a, b) => { // non-anonymous as you ordered...\n    return b.manhattan < a.manhattan ?  1 // if b should come earlier, push a to end\n         : b.manhattan > a.manhattan ? -1 // if b should come later, push a to begin\n         : 0;                   // a and b are equal\n    });\n\n    \n \n    console.log(`Generacja ${generation}, odległość najlepszego agenta: ${agentArray[population-1].manhattan}`);    \n    \n    \n    //ROZDZIALKA NA 70 i 30\n\n    var agents70 = [];\n    var agents30 = [];\n    agents70 = agentArray.slice(0,((population+1)*0.7));\n    //console.log(agents70);\n    agents30 = agentArray.slice(((population+1)*0.7), population);\n    //console.log(agents30);\n    var startArray = []\n    var endArray = []\n    var startEndArray = []\n    agents70.forEach(agent => {    \n        startArray.push(agent.agentsMoves.slice(0, maxMoves/2))       \n        endArray.push(agent.agentsMoves.slice(maxMoves/2, maxMoves))\n    })\n    // console.log(startArray);\n    //console.log(endArray);\n    //console.log(endArray[0]);\n\n    //TUTAJ LOSUJEMY\n    var help;\n    for (let index = 0; index < endArray.length; index++) {\n        endArray[index] = endArray[index].sort(() => Math.random() - 0.5).slice(0);\n        \n    }\n\n    //----------------TUTAJ SKONCZYLISMY - CZYTAJ KOMENTARZE--------------\n    \n    /*\n        Krzyzowanie startowych z koncowymi ruchami(jak na schemacie) do nowej TABLICY startEndArray\n    */\n    for (let index = 0; index < Math.floor(((population+1)*0.7)); index = index+2) {\n        try {\n            startEndArray.push(startArray[index].concat(endArray[index+1])) //pierwszy startowy z nastepnym koncowym\n            startEndArray.push(startArray[index+1].concat(endArray[index])) //nastepny startowy z pierwszym koncowym\n        } catch (error) {\n            console.log(index);\n            console.log(`population: ${((population+1)*0.7)}`);\n            \n        }\n        \n    }\n\n    \n    //PODMIENIAMY TE 140 tablic ruchow agentow za 140 wymieszanych ruchow z tablicy startEndArray!\n\n    for (let index = 0; index < agents70.length; index++) {\n        for (let indexInside = 0; indexInside < maxMoves; indexInside++) {\n            \n            const a = {}\n            agents70[index].agentsMoves[indexInside] = startEndArray[index][indexInside]; //PODMIANA\n            const b = {}\n            \n        }\n    }\n\n\n    //W DUZEJ TABLICY AGENTOW agentArray Podmnieniamy pierwszych 140 agentow za tych zmutowanych z agents70\n\n    for (let index = 0; index < agents70.length; index++) {\n        const a = {}\n        agentArray[index].agentsMoves = agents70[index].agentsMoves.slice(0)\n        const b = {}\n        \n    }\n\n    //GENERACJA + 1\n\n   generation +=1 ;\n}\n\ndocument.getElementById(\"start\").addEventListener(\"click\",() => {\n    console.log(\"Start\")\n    init();\n    generateStartingPopulation();\n    // console.log('agentsMoves: ');\n    // console.log(agentsMoves);\n    // agentsPositions.forEach((agent, index)=> {\n    //     // console.log(agent[maxMoves-1]);\n    //     if()\n\n    //     endingPositions[index] =  agent[maxMoves-1];\n        \n    // })\n    for (let index = 0; index < population; index++) {\n        endingPositions.push({r: 1, c: 1});           \n    }\n\n    agentsPositions.forEach((agentPosition, indexOut) => {\n        try {\n            agentPosition.forEach((agent, index) => {\n                \n                    wallPosition.map(wall => {\n                        if(agent.r === wall.r && agent.c === wall.c ){\n                            \n                            if(index === 0){\n                                endingPositions[indexOut].r=player.r;\n                                endingPositions[indexOut].c=player.c;\n                            } else {\n\n                                endingPositions[indexOut].r=agentPosition[index-1].r;\n                                endingPositions[indexOut].c=agentPosition[index-1].c;\n                            }      \n                            throw BreakException\n                        }    \n                    });\n                \n            });\n        } catch (e) {\n            if (e !== BreakException) throw e;\n        }\n    });\n\n    \n    //console.log(endingPositions);\n    manhattanJudge();\n    \n    while(!isWinner){\n        searchRoute();\n    }\n    \n\n\n    //console.log(endArray[0]);\n    \n    //\n    // console.log(endingPositions);\n    \n    \n    /*\n        (1/(Math.abs(xi-xg) + Math.abs(yi-yg) +1 ))\n    */\n   \n    // console.log('agentsPositions: ' + agentsPositions);\n})\n\n \n\n"]}